#include <bits/stdc++.h>
using namespace std;
void dfs(int node,stack<int>&st,vector<int>&vis,vector<int>adj[])
{
   vis[node]=1;
   for(auto it:adj[node])
   {
       if(vis[it]==0) dfs(it,st,vis,adj);
   }
   st.push(node);
}
void revdfs(int node,vector<int>&vis,vector<int>transpose[])
{
    cout<<node<<" ";
    vis[node]=1;
    for(auto it:transpose[node])
    {
        if(vis[it]==0) revdfs(it,vis,transpose);
    }
}
int main()
{
    int V,E;
    cin>>V>>E;
    vector<int>adj[V];
    for(int i=0;i<E;i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
    }
    vector<int>vis(V,0);
    stack<int>st;
    for(int i=0;i<V;i++)
    {
        if(vis[i]==0) dfs(i,st,vis,adj);
    }
    vector<int>transpose[V];
    for(int i=0;i<V;i++)
    {
        vis[i]=0;
        for(auto it:adj[i]) transpose[it].push_back(i);
    }
    cout<<"Strongly connected components are"<<endl;
    while(!st.empty())
    {
        int node=st.top();
        st.pop();
        if(vis[node]==0)
        {
            revdfs(node,vis,transpose);
            cout<<endl;
        }
    }
    
   return 0;
}
